// Generated by SandPiper(TM) 1.11-2021/01/28-beta from Redwood EDA.
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "./includes/sandpiper_gen.vh"



genvar regs, src;


//
// Signals declared top-level.
//

// For $dest_pending.
wire L0_dest_pending_a0;

// For $dest_reg.
wire [2:0] L0_dest_reg_a0;

// For $dest_reg_now.
wire L0_dest_reg_now_a0;

// For $dest_reg_valid.
wire L0_dest_reg_valid_a0;

// For $dest_reg_wr.
wire [4:0] L0_dest_reg_wr_a0;

// For $goodPathMask.
wire [2:0] L0_goodPathMask_a0;

// For $is_dest_condition.
wire L0_is_dest_condition_a0;

// For $is_reg_rs1.
wire L0_is_reg_rs1_a0;

// For $is_reg_rs2.
wire L0_is_reg_rs2_a0;

// For $reg_rs1.
wire [4:0] L0_reg_rs1_a0;

// For $reg_rs2.
wire [4:0] L0_reg_rs2_a0;

// For $reg_wr_pending.
wire [2:0] L0_reg_wr_pending_a0;

// For $reg_wr_pending_wr.
wire L0_reg_wr_pending_wr_a0;

// For $reg_write.
wire L0_reg_write_a0;

// For $replay_int.
wire L0_replay_int_a0;

// For $rslt.
wire [2:0] L0_rslt_a0;

// For $rslt_wr.
wire [31:0] L0_rslt_wr_a0;

// For $second_issue.
wire [2:0] L0_second_issue_a0;

// For $valid_decode.
wire L0_valid_decode_a0;

// For $valid_dest_reg_valid_rd.
wire [2:0] L0_valid_dest_reg_valid_rd_a0;

// For $valid_dest_reg_valid_wr.
wire L0_valid_dest_reg_valid_wr_a0;

// For /regs$pending.
wire Regs_pending_n1 [31:1];
reg  Regs_pending_a0 [31:1],
     Regs_pending_a1 [31:1],
     Regs_pending_a2 [31:1];

// For /regs$value.
wire [31:0] Regs_value_a0 [31:1];
reg  [31:0] Regs_value_a1 [31:1],
            Regs_value_a2 [31:1];

// For /src$replay.
wire [2:1] Src_replay_a0;



generate


   //
   // Scope: /regs[31:1]
   //
   for (regs = 1; regs <= 31; regs=regs+1) begin : L1gen_Regs
      // For $pending.
      always @(posedge clk) Regs_pending_a0[regs] <= Regs_pending_n1[regs];
      always @(posedge clk) Regs_pending_a1[regs] <= Regs_pending_a0[regs];
      always @(posedge clk) Regs_pending_a2[regs] <= Regs_pending_a1[regs];

      // For $value.
      always @(posedge clk) Regs_value_a1[regs][31:0] <= Regs_value_a0[regs][31:0];
      always @(posedge clk) Regs_value_a2[regs][31:0] <= Regs_value_a1[regs][31:0];

   end


endgenerate

