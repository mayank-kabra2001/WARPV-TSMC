//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.11-2021/01/28-beta
//`include "sp_verilog.vh" //_\SV 
   
   
//_\SV

   // =========================================
   // Welcome!  Try the tutorials via the menu.
   // =========================================

   // Default Makerchip TL-Verilog Code Template
   
   // Macro providing required top-level module definition, random
   // stimulus support, and Verilator config.
   
   
   
      
       
       
       
       
       
       
       
       
      
            
            
            
            
            
      
   

         
    module alu (
       input clk,
       input reset,
       input [M4_WORD_RANGE] reg_value1, 
       input [M4_WORD_RANGE] reg_value2,
       input [M4_PC_RANGE]raw_i_imm,
       input raw_funct7_5, 
       input valid_exe, 
       output reg [M4_WORD_RANGE] addi_rslt,
       output reg [M4_WORD_RANGE] add_rslt,
       output reg [M4_WORD_RANGE] sub_rslt
       ); 

`include "test_alu_gen.v"
generate //_\TLV
   assign L0_reset_a0 = reset;
   assign L0_reg_value1_a0 = reg_value1; 
   assign L0_reg_value2_a0 = reg_value2; 
   assign L0_raw_i_imm_a0 = raw_i_imm; 
   assign L0_raw_funct7_5_a0 = raw_funct7_5;
   assign L0_valid_exe_a0 = valid_exe; 
   `BOGUS_USE(L0_reset_a0)
   `BOGUS_USE(L0_valid_exe_a0)
   
   //?$valid_exe
   assign L0_addi_rslt_a0[M4_WORD_RANGE]  = L0_reg_value1_a0 + L0_raw_i_imm_a0;  // TODO: This has its own adder; could share w/ add/sub.
   assign L0_add_sub_rslt_a0[M4_WORD_RANGE] = (L0_raw_funct7_5_a0 == 1) ?  L0_reg_value1_a0 - L0_reg_value2_a0 : L0_reg_value1_a0 + L0_reg_value2_a0;
   assign L0_add_rslt_a0[M4_WORD_RANGE]   = L0_add_sub_rslt_a0;
   assign L0_sub_rslt_a0[M4_WORD_RANGE]   = L0_add_sub_rslt_a0;

   assign addi_rslt = L0_addi_rslt_a0;
   assign add_rslt = L0_add_rslt_a0;
   assign sub_rslt = L0_sub_rslt_a0;
endgenerate
//_\SV
   endmodule

